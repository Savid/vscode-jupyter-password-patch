diff --git a/package.json b/package.json
index 5a3f3309e..bceace037 100644
--- a/package.json
+++ b/package.json
@@ -29,7 +29,7 @@
         "theme": "light"
     },
     "engines": {
-        "vscode": "^1.97.0"
+        "vscode": "^1.93.0"
     },
     "l10n": "./l10n",
     "extensionKind": [
@@ -1692,6 +1692,17 @@
                     "markdownDescription": "%jupyter.configuration.jupyter.kernels.trusted.markdownDescription%",
                     "scope": "machine"
                 },
+                "jupyter.passwords": {
+                    "type": "object", 
+                    "default": {},
+                    "description": "Passwords for remote Jupyter servers",
+                    "scope": "machine",
+                    "patternProperties": {
+                        "^.*$": {
+                            "type": "string"
+                        }
+                    }
+                },
                 "jupyter.interactiveWindow.creationMode": {
                     "type": "string",
                     "enum": [
diff --git a/src/standalone/userJupyterServer/jupyterPasswordConnect.ts b/src/standalone/userJupyterServer/jupyterPasswordConnect.ts
index df158ec11..2c37caed9 100644
--- a/src/standalone/userJupyterServer/jupyterPasswordConnect.ts
+++ b/src/standalone/userJupyterServer/jupyterPasswordConnect.ts
@@ -1,7 +1,7 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
 
-import { CancellationError, ConfigurationTarget, QuickInputButtons, window } from 'vscode';
+import { CancellationError, ConfigurationTarget, QuickInputButtons, window, workspace } from 'vscode';
 import { IConfigurationService, IDisposable, IDisposableRegistry } from '../../platform/common/types';
 import { DataScience } from '../../platform/common/utils/localize';
 import { noop } from '../../platform/common/utils/misc';
@@ -83,6 +83,23 @@ export class JupyterPasswordConnect {
         return result;
     }
 
+    private getPassword(url: string): string | undefined {
+        const urlWithoutTrailing = url.endsWith('/') ? url.slice(0, -1) : url;
+        const passwords = !workspace.workspaceFolders?.length
+            ? workspace.getConfiguration('jupyter').get<Record<string, string>>('passwords', {})
+            : workspace.workspaceFolders.reduce(
+                  (acc, folder) => {
+                      const folderPasswords = workspace
+                          .getConfiguration('jupyter', folder.uri)
+                          .get<Record<string, string>>('passwords', {});
+                      return { ...acc, ...folderPasswords };
+                  },
+                  {} as Record<string, string>
+              );
+
+        return passwords[urlWithoutTrailing] || passwords[url];
+    }
+
     /**
      * The input prompts created here are not disposed and hidden immediately.
      * The idea is that the workflow that requires this method to prompt for password
@@ -109,8 +126,10 @@ export class JupyterPasswordConnect {
         const requiresPassword = await this.needPassword(options.url);
 
         if (requiresPassword || options.isTokenEmpty) {
+            userPassword = this.getPassword(options.url);
             // Get password first
-            if (requiresPassword && options.isTokenEmpty) {
+            if (!userPassword && requiresPassword && options.isTokenEmpty) {
+                // Check if we have a saved password for this URL
                 const input = window.createInputBox();
                 options.disposables.push(input);
                 input.title = DataScience.jupyterSelectPasswordTitle;
